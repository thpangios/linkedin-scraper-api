{"version":3,"file":"index.js","sourceRoot":"/","sources":["utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Modern TypeScript utilities with proper typing for 2025\nimport moment from 'moment-timezone';\nimport { Page } from 'puppeteer';\nimport countries from 'i18n-iso-countries';\nimport cities from 'all-the-cities';\n\n// Define Location interface locally to avoid circular imports\nexport interface Location {\n  city: string | null;\n  province: string | null;\n  country: string | null;\n}\n\nexport const getIsCountry = (text: string): boolean => {\n  const countriesList = Object.values(countries.getNames('en'));\n  const lowerCaseText = text.toLowerCase();\n\n  // Some custom text that we assume is also a country (lower cased)\n  // But is not detected correctly by the iso-countries module\n  if (['united states', 'the netherlands'].includes(lowerCaseText)) {\n    return true;\n  }\n\n  return !!countriesList.find(country => country.toLowerCase() === lowerCaseText);\n};\n\nexport const getIsCity = (text: string): boolean => {\n  const lowerCaseText = text.toLowerCase();\n\n  if (['new york'].includes(lowerCaseText)) {\n    return true;\n  }\n\n  return !!cities.find((city: { name: string }) => city.name.toLowerCase() === lowerCaseText);\n};\n\n// Use proper moment types and default import\nexport const formatDate = (date: string | Date | null): string | null => {\n  if (!date) return null;\n  if (date === 'Present') {\n    return moment().format();\n  }\n\n  return moment(date, 'MMMY').format();\n};\n\n// Fixed: Use consistent moment.MomentInput types\nexport const getDurationInDays = (formattedStartDate: string | Date | null, formattedEndDate: string | Date | null): number | null => {\n  if (!formattedStartDate || !formattedEndDate) return null;\n  // +1 to include the start date\n  return moment(formattedEndDate).diff(moment(formattedStartDate), 'days') + 1;\n};\n\nexport const getLocationFromText = (text: string): Location | null => {\n  // Text is something like: Amsterdam Oud-West, North Holland Province, Netherlands\n\n  if (!text) return null;\n\n  const cleanText = text.replace(' Area', '').trim();\n  const parts = cleanText.split(', ');\n\n  let city: string | null = null;\n  let province: string | null = null;\n  let country: string | null = null;\n\n  // If there are 3 parts, we can be sure of the order of each part\n  // So that must be a: city, province/state and country\n  if (parts.length === 3) {\n    city = parts[0];\n    province = parts[1];\n    country = parts[2];\n\n    return {\n      city,\n      province,\n      country\n    };\n  }\n\n  // If we only have 2 parts, we don't know exactly what each part is;\n  // it could still be: city, province/state or a country\n  // For example: Sacramento, California Area\n  if (parts.length === 2) {\n    // 2 possible scenario's are most likely. We strictly check for the following:\n    // first: city + country\n    // second: city + province/state\n\n    if (getIsCity(parts[0]) && getIsCountry(parts[1])) {\n      return {\n        city: parts[0],\n        province: null,\n        country: parts[1]\n      };\n    }\n\n    // If the second part is NOT a country, it's probably a province/state\n    if (getIsCity(parts[0]) && !getIsCountry(parts[1])) {\n      return {\n        city: parts[0],\n        province: parts[1],\n        country: null\n      };\n    }\n\n    return {\n      city: null,\n      province: parts[0],\n      country: parts[1]\n    };\n  }\n\n  // If we only have one part we'll end up here\n\n  // Just find out if it's one of: city, province/state or country\n  if (getIsCountry(parts[0])) {\n    return {\n      city: null,\n      province: null,\n      country: parts[0]\n    };\n  } \n  \n  if (getIsCity(parts[0])) {\n    return {\n      city: parts[0],\n      province: null,\n      country: null\n    };\n  }\n\n  // Else, it must be a province/state. We just don't know and assume it is.\n  return {\n    city: null,\n    province: parts[0],\n    country: null\n  };\n};\n\nexport const getCleanText = (text: string | null): string | null => {\n  const regexRemoveMultipleSpaces = / +/g;\n  const regexRemoveLineBreaks = /(\\r\\n\\t|\\n|\\r\\t)/gm;\n\n  if (!text) return null;\n\n  const cleanText = text\n    .replace(regexRemoveLineBreaks, '')\n    .replace(regexRemoveMultipleSpaces, ' ')\n    .replace('...', '')\n    .replace('See more', '')\n    .replace('See less', '')\n    .trim();\n\n  return cleanText;\n};\n\nexport const statusLog = (section: string, message: string, scraperSessionId?: string | number): void => {\n  const sessionPart = (scraperSessionId) ? ` (${scraperSessionId})` : '';\n  const messagePart = (message) ? `: ${message}` : '';\n  console.log(`Scraper (${section})${sessionPart}${messagePart}`);\n};\n\n// Modern async/await pattern with proper typing\nexport const autoScroll = async (page: Page): Promise<void> => {\n  await page.evaluate(async (): Promise<void> => {\n    await new Promise<void>((resolve): void => {\n      let totalHeight = 0;\n      const distance = 500;\n      const timer = setInterval((): void => {\n        const scrollHeight = document.body.scrollHeight;\n        window.scrollBy(0, distance);\n        totalHeight += distance;\n\n        if (totalHeight >= scrollHeight) {\n          clearInterval(timer);\n          resolve();\n        }\n      }, 100);\n    });\n  });\n};\n\n// Fixed: Add error handling for malformed URLs\nexport const getHostname = (url: string): string | null => {\n  try {\n    return new URL(url).hostname;\n  } catch (error) {\n    // Return null for malformed URLs instead of throwing\n    return null;\n  }\n};"]}